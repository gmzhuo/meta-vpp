From 906f29bbede45ce7b395cd3417394d6a8c4f96fb Mon Sep 17 00:00:00 2001
From: OpenEmbedded <oe.patch@oe>
Date: Thu, 23 Apr 2020 15:05:13 +0000

---
 src/vcl/vppcom.c                         | 277 +++++++++++++++++++++++
 src/vcl/vppcom.h                         |   7 +
 src/vnet/session/application_interface.h | 111 +++++++++
 3 files changed, 395 insertions(+)

diff --git a/src/vcl/vppcom.c b/src/vcl/vppcom.c
index 579cbc165..874ae9f3a 100644
--- a/src/vcl/vppcom.c
+++ b/src/vcl/vppcom.c
@@ -1910,6 +1910,102 @@ vppcom_session_peek (uint32_t session_handle, void *buf, int n)
   return (vppcom_session_read_internal (session_handle, buf, n, 1));
 }
 
+static inline int
+vppcom_session_read_msg_internal (uint32_t session_handle, struct msghdr *msgh,
+			      u8 peek)
+{
+  vcl_worker_t *wrk = vcl_worker_get_current ();
+  int n_read = 0, is_nonblocking;
+  vcl_session_t *s = 0;
+  svm_fifo_t *rx_fifo;
+  svm_msg_q_msg_t msg;
+  session_event_t *e;
+  svm_msg_q_t *mq;
+  u8 is_ct;
+
+  if (PREDICT_FALSE (!msgh))
+    return VPPCOM_EINVAL;
+
+  s = vcl_session_get_w_handle (wrk, session_handle);
+  if (PREDICT_FALSE (!s || s->is_vep))
+    return VPPCOM_EBADFD;
+
+  if(!s->is_dgram)
+    return -1;
+
+  if (PREDICT_FALSE (!vcl_session_is_open (s)))
+    {
+      VDBG (0, "session %u[0x%llx] is not open! state 0x%x (%s)",
+	    s->session_index, s->vpp_handle, s->session_state,
+	    vppcom_session_state_str (s->session_state));
+      return vcl_session_closed_error (s);
+    }
+
+  is_nonblocking = VCL_SESS_ATTR_TEST (s->attr, VCL_SESS_ATTR_NONBLOCK);
+  is_ct = vcl_session_is_ct (s);
+  mq = wrk->app_event_queue;
+  rx_fifo = is_ct ? s->ct_rx_fifo : s->rx_fifo;
+  s->has_rx_evt = 0;
+
+  if (svm_fifo_is_empty_cons (rx_fifo))
+    {
+      if (is_nonblocking)
+	{
+	  if (vcl_session_is_closing (s))
+	    return vcl_session_closing_error (s);
+	  svm_fifo_unset_event (s->rx_fifo);
+	  return VPPCOM_EWOULDBLOCK;
+	}
+      while (svm_fifo_is_empty_cons (rx_fifo))
+	{
+	  if (vcl_session_is_closing (s))
+	    return vcl_session_closing_error (s);
+
+	  svm_fifo_unset_event (s->rx_fifo);
+	  svm_msg_q_lock (mq);
+	  if (svm_msg_q_is_empty (mq))
+	    svm_msg_q_wait (mq);
+
+	  svm_msg_q_sub_w_lock (mq, &msg);
+	  e = svm_msg_q_msg_data (mq, &msg);
+	  svm_msg_q_unlock (mq);
+	  if (!vcl_is_rx_evt_for_session (e, s->session_index, is_ct))
+	    vcl_handle_mq_event (wrk, e);
+	  svm_msg_q_free_msg (mq, &msg);
+	}
+    }
+
+  n_read = app_recv_dgram_msg_raw (rx_fifo, msgh, &s->transport, 0, peek);
+
+  if (svm_fifo_is_empty_cons (rx_fifo))
+    svm_fifo_unset_event (s->rx_fifo);
+
+  /* Cut-through sessions might request tx notifications on rx fifos */
+  if (PREDICT_FALSE (rx_fifo->want_deq_ntf))
+    {
+      app_send_io_evt_to_vpp (s->vpp_evt_q, s->rx_fifo->master_session_index,
+			      SESSION_IO_EVT_RX, SVM_Q_WAIT);
+      svm_fifo_reset_has_deq_ntf (s->rx_fifo);
+    }
+
+  VDBG (2, "session %u[0x%llx]: read %d bytes from (%p)", s->session_index,
+	s->vpp_handle, n_read, rx_fifo);
+
+  return n_read;
+}
+
+int
+vppcom_session_read_msg (uint32_t session_handle, struct msghdr *msg)
+{
+  return (vppcom_session_read_msg_internal (session_handle, msg, 0));
+}
+
+static int
+vppcom_session_peek_msg (uint32_t session_handle, struct msghdr *msg)
+{
+  return (vppcom_session_read_msg_internal (session_handle, msg, 1));
+}
+
 int
 vppcom_session_read_segments (uint32_t session_handle,
 			      vppcom_data_segments_t ds)
@@ -2098,6 +2194,89 @@ vppcom_session_write_inline (vcl_worker_t * wrk, vcl_session_t * s, void *buf,
   return n_write;
 }
 
+static inline int
+vppcom_session_write_msg_inline (vcl_worker_t * wrk, vcl_session_t * s, struct msghdr *msgh,
+			     u8 is_flush)
+{
+  int n_write, is_nonblocking;
+  size_t n = 0;
+  session_evt_type_t et;
+  svm_msg_q_msg_t msg;
+  svm_fifo_t *tx_fifo;
+  session_event_t *e;
+  svm_msg_q_t *mq;
+  u8 is_ct;
+
+  for(int j = 0; j < msgh->msg_iovlen; ++j) {
+    struct iovec *iov = &msgh->msg_iov[j];
+    n += iov->iov_len;
+  };
+
+  if (PREDICT_FALSE (s->is_vep))
+    {
+      VDBG (0, "ERROR: session %u [0x%llx]: cannot write to an epoll"
+	    " session!", s->session_index, s->vpp_handle);
+      return VPPCOM_EBADFD;
+    }
+
+  if (PREDICT_FALSE (!vcl_session_is_open (s)))
+    {
+      VDBG (1, "session %u [0x%llx]: is not open! state 0x%x (%s)",
+	    s->session_index, s->vpp_handle, s->session_state,
+	    vppcom_session_state_str (s->session_state));
+      return vcl_session_closed_error (s);;
+    }
+
+  is_ct = vcl_session_is_ct (s);
+  tx_fifo = is_ct ? s->ct_tx_fifo : s->tx_fifo;
+  is_nonblocking = VCL_SESS_ATTR_TEST (s->attr, VCL_SESS_ATTR_NONBLOCK);
+
+  mq = wrk->app_event_queue;
+  if (!vcl_fifo_is_writeable (tx_fifo, n, 1))
+    {
+      if (is_nonblocking)
+	{
+	  return VPPCOM_EWOULDBLOCK;
+	}
+      while (!vcl_fifo_is_writeable (tx_fifo, n, 1))
+	{
+	  svm_fifo_add_want_deq_ntf (tx_fifo, SVM_FIFO_WANT_DEQ_NOTIF);
+	  if (vcl_session_is_closing (s))
+	    return vcl_session_closing_error (s);
+	  svm_msg_q_lock (mq);
+	  if (svm_msg_q_is_empty (mq))
+	    svm_msg_q_wait (mq);
+
+	  svm_msg_q_sub_w_lock (mq, &msg);
+	  e = svm_msg_q_msg_data (mq, &msg);
+	  svm_msg_q_unlock (mq);
+
+	  if (!vcl_is_tx_evt_for_session (e, s->session_index, is_ct))
+	    vcl_handle_mq_event (wrk, e);
+	  svm_msg_q_free_msg (mq, &msg);
+	}
+    }
+
+  et = SESSION_IO_EVT_TX;
+  if (is_flush && !is_ct)
+    et = SESSION_IO_EVT_TX_FLUSH;
+
+  n_write = app_send_dgram_msg_raw (tx_fifo, &s->transport,
+				  s->vpp_evt_q, msgh, et,
+				  0 /* do_evt */ , SVM_Q_WAIT);
+
+  if (svm_fifo_set_event (s->tx_fifo))
+    app_send_io_evt_to_vpp (s->vpp_evt_q, s->tx_fifo->master_session_index,
+			    et, SVM_Q_WAIT);
+
+  ASSERT (n_write > 0);
+
+  VDBG (2, "session %u [0x%llx]: wrote %d bytes", s->session_index,
+	s->vpp_handle, n_write);
+
+  return n_write;
+}
+
 int
 vppcom_session_write (uint32_t session_handle, void *buf, size_t n)
 {
@@ -3620,6 +3802,76 @@ vppcom_session_recvfrom (uint32_t session_handle, void *buffer,
   return rv;
 }
 
+int
+vppcom_session_msg_recvfrom (uint32_t session_handle, struct msghdr *msg,
+		int flags, vppcom_endpt_t * ep)
+{
+  vcl_worker_t *wrk = vcl_worker_get_current ();
+  int rv = VPPCOM_OK;
+  vcl_session_t *session = 0;
+
+  session = vcl_session_get_w_handle (wrk, session_handle);
+  if (PREDICT_FALSE (!session))
+  {
+    VDBG (0, "sh 0x%llx is closed!", session_handle);
+    return VPPCOM_EBADFD;
+  }
+
+  if (flags == 0)
+    rv = vppcom_session_read_msg (session_handle, msg);
+  else if (flags & MSG_PEEK)
+    rv = vppcom_session_peek_msg (session_handle, msg);
+  else
+    {
+      VDBG (0, "Unsupport flags for recvfrom %d", flags);
+      return VPPCOM_EAFNOSUPPORT;
+    }
+
+  if (ep)
+  {
+    ep->is_ip4 = session->transport.is_ip4;
+    ep->port = session->transport.rmt_port;
+    if (session->transport.is_ip4)
+      clib_memcpy_fast (ep->ip, &session->transport.rmt_ip.ip4,
+          sizeof (ip4_address_t));
+    else
+      clib_memcpy_fast (ep->ip, &session->transport.rmt_ip.ip6,
+          sizeof (ip6_address_t));
+  }
+
+  return rv;
+}
+
+
+int vppcom_session_store_peer_address(uint32_t session_handle, vppcom_endpt_t * ep)
+{
+  if(ep == NULL)
+    return -1;
+
+  vcl_worker_t *wrk = vcl_worker_get_current ();
+  int rv = VPPCOM_OK;
+  vcl_session_t *session = 0;
+
+  session = vcl_session_get_w_handle (wrk, session_handle);
+  if (PREDICT_FALSE (!session))
+  {
+    VDBG (0, "sh 0x%llx is closed!", session_handle);
+    return VPPCOM_EBADFD;
+  }
+
+  ep->is_ip4 = session->transport.is_ip4;
+  ep->port = session->transport.rmt_port;
+
+  if (session->transport.is_ip4)
+    clib_memcpy_fast (ep->ip, &session->transport.rmt_ip.ip4,
+      sizeof (ip4_address_t));
+  else
+    clib_memcpy_fast (ep->ip, &session->transport.rmt_ip.ip6,
+      sizeof (ip6_address_t));
+
+  return rv;
+}
+
 int
 vppcom_session_sendto (uint32_t session_handle, void *buffer,
 		       uint32_t buflen, int flags, vppcom_endpt_t * ep)
@@ -3663,6 +3918,48 @@ vppcom_session_sendto (uint32_t session_handle, void *buffer,
 				       s->is_dgram ? 1 : 0));
 }
 
+int
+vppcom_session_msg_sendto (uint32_t session_handle, struct msghdr *msg,
+		       int flags, vppcom_endpt_t * ep)
+{
+  vcl_worker_t *wrk = vcl_worker_get_current ();
+  vcl_session_t *s;
+
+  if (!msg)
+    return VPPCOM_EINVAL;
+
+  s = vcl_session_get_w_handle (wrk, session_handle);
+  if (!s || !s->is_dgram)
+    return VPPCOM_EBADFD;
+
+  if (ep)
+    {
+      if (s->session_type != VPPCOM_PROTO_UDP
+	  || (s->flags & VCL_SESSION_F_CONNECTED))
+	return VPPCOM_EINVAL;
+
+      /* Session not connected/bound in vpp. Create it by 'connecting' it */
+      if (PREDICT_FALSE (s->session_state == STATE_CLOSED))
+	{
+	  vcl_send_session_connect (wrk, s);
+	}
+      else
+	{
+	  s->transport.is_ip4 = ep->is_ip4;
+	  s->transport.rmt_port = ep->port;
+	  vcl_ip_copy_from_ep (&s->transport.rmt_ip, ep);
+	}
+    }
+
+  if (flags)
+    {
+      // TBD check the flags and do the right thing
+      VDBG (2, "handling flags 0x%u (%d) not implemented yet.", flags, flags);
+    }
+
+  return (vppcom_session_write_msg_inline (wrk, s, msg, 1));
+}
+
 int
 vppcom_poll (vcl_poll_t * vp, uint32_t n_sids, double wait_for_time)
 {
diff --git a/src/vcl/vppcom.h b/src/vcl/vppcom.h
index d2a5a103f..195e930ee 100644
--- a/src/vcl/vppcom.h
+++ b/src/vcl/vppcom.h
@@ -282,6 +282,8 @@ extern int vppcom_epoll_ctl (uint32_t vep_handle, int op,
 			     struct epoll_event *event);
 extern int vppcom_epoll_wait (uint32_t vep_handle, struct epoll_event *events,
 			      int maxevents, double wait_for_time);
+
+extern int vppcom_session_store_peer_address(uint32_t session_handle, vppcom_endpt_t * ep);
 extern int vppcom_session_attr (uint32_t session_handle, uint32_t op,
 				void *buffer, uint32_t * buflen);
 extern int vppcom_session_recvfrom (uint32_t session_handle, void *buffer,
@@ -290,6 +292,11 @@ extern int vppcom_session_recvfrom (uint32_t session_handle, void *buffer,
 extern int vppcom_session_sendto (uint32_t session_handle, void *buffer,
 				  uint32_t buflen, int flags,
 				  vppcom_endpt_t * ep);
+extern int vppcom_session_msg_recvfrom (uint32_t session_handle,
+					struct msghdr *msg, int flags, vppcom_endpt_t * ep);
+extern int vppcom_session_msg_sendto (uint32_t session_handle,
+				struct msghdr *msg, int flags, vppcom_endpt_t * ep);
+
 extern int vppcom_poll (vcl_poll_t * vp, uint32_t n_sids,
 			double wait_for_time);
 extern int vppcom_mq_epoll_fd (void);
diff --git a/src/vnet/session/application_interface.h b/src/vnet/session/application_interface.h
index d09432d0b..a4b5c26a3 100644
--- a/src/vnet/session/application_interface.h
+++ b/src/vnet/session/application_interface.h
@@ -20,6 +20,7 @@
 #include <vnet/session/session_types.h>
 #include <vnet/tls/tls_test.h>
 #include <svm/fifo_segment.h>
+#include <sys/socket.h>
 
 typedef struct certificate_
 {
@@ -642,6 +643,65 @@ app_send_dgram (app_session_t * s, u8 * data, u32 len, u8 noblock)
 			     noblock);
 }
 
+always_inline int
+app_send_dgram_msg_raw (svm_fifo_t * f, app_session_transport_t * at,
+		    svm_msg_q_t * vpp_evt_q, struct msghdr *msg, u8 evt_type,
+		    u8 do_evt, u8 noblock)
+{
+  u32 max_enqueue, actual_write, len = 0;
+  session_dgram_hdr_t hdr;
+  int rv, totallen = 0;
+  struct iovec *iov = &msg->msg_iov[0];
+
+  max_enqueue = svm_fifo_max_enqueue_prod (f);
+  if (max_enqueue <= sizeof (session_dgram_hdr_t))
+    return 0;
+
+  max_enqueue -= sizeof (session_dgram_hdr_t);
+
+  for(int j = 0; j < msg->msg_iovlen; ++j) {
+    struct iovec *iov = &msg->msg_iov[j];
+    len += iov->iov_len;
+  }
+
+  actual_write = clib_min (len, max_enqueue);
+  hdr.data_length = actual_write;
+  hdr.data_offset = 0;
+  clib_memcpy_fast (&hdr.rmt_ip, &at->rmt_ip, sizeof (ip46_address_t));
+  hdr.is_ip4 = at->is_ip4;
+  hdr.rmt_port = at->rmt_port;
+  clib_memcpy_fast (&hdr.lcl_ip, &at->lcl_ip, sizeof (ip46_address_t));
+  hdr.lcl_port = at->lcl_port;
+  rv = svm_fifo_enqueue (f, sizeof (hdr), (u8 *) & hdr);
+  ASSERT (rv == sizeof (hdr));
+
+  for(int j = 0; j < msg->msg_iovlen; ++j) {
+    iov = &msg->msg_iov[j];
+    rv = svm_fifo_enqueue(f, iov->iov_len, iov->iov_base);
+    if(rv > 0) {
+      totallen += iov->iov_len;
+    } else {
+		break;
+    }
+  }
+
+  if (do_evt)
+    {
+      if (totallen > 0 && svm_fifo_set_event (f))
+	app_send_io_evt_to_vpp (vpp_evt_q, f->master_session_index, evt_type,
+				noblock);
+    }
+  ASSERT (totallen);
+  return totallen;
+}
+
+always_inline int
+app_send_dgram_msg (app_session_t * s, struct msghdr *msg, u8 noblock)
+{
+  return app_send_dgram_msg_raw (s->tx_fifo, &s->transport, s->vpp_evt_q, msg,
+			     SESSION_IO_EVT_TX, 1 /* do_evt */ , noblock);
+}
+
 always_inline int
 app_send_stream_raw (svm_fifo_t * f, svm_msg_q_t * vpp_evt_q, u8 * data,
 		     u32 len, u8 evt_type, u8 do_evt, u8 noblock)
@@ -718,6 +777,58 @@ app_recv_dgram (app_session_t * s, u8 * buf, u32 len)
   return app_recv_dgram_raw (s->rx_fifo, buf, len, &s->transport, 1, 0);
 }
 
+always_inline int
+app_recv_dgram_msg_raw (svm_fifo_t * f, struct msghdr *msg,
+		    app_session_transport_t * at, u8 clear_evt, u8 peek)
+{
+  session_dgram_pre_hdr_t ph;
+  u32 max_deq;
+  int rv, totallen;
+
+  max_deq = svm_fifo_max_dequeue_cons (f);
+  if (max_deq < sizeof (session_dgram_hdr_t))
+    {
+      if (clear_evt)
+	svm_fifo_unset_event (f);
+      return 0;
+    }
+
+  if (clear_evt)
+    svm_fifo_unset_event (f);
+
+  svm_fifo_peek (f, 0, sizeof (ph), (u8 *) & ph);
+  ASSERT (ph.data_length >= ph.data_offset);
+  if (!ph.data_offset)
+    svm_fifo_peek (f, sizeof (ph), sizeof (*at), (u8 *) at);
+
+  totallen = 0;
+  for(int j = 0; j < msg->msg_iovlen; ++j) {
+    struct iovec *iov = &msg->msg_iov[j];
+    u32 len = iov->iov_len + totallen;
+    len = clib_min (len, ph.data_length - ph.data_offset);
+    if(len <= 0) {
+    }
+    rv = svm_fifo_peek (f, ph.data_offset + SESSION_CONN_HDR_LEN + totallen,
+		len - totallen, iov->iov_base);
+    totallen += rv;
+  }
+
+  if (peek)
+    return totallen;
+  ph.data_offset += totallen;
+  if (ph.data_offset == ph.data_length)
+    svm_fifo_dequeue_drop (f, ph.data_length + SESSION_CONN_HDR_LEN);
+  else
+    svm_fifo_overwrite_head (f, (u8 *) & ph, sizeof (ph));
+  return totallen;
+}
+
+always_inline int
+app_recv_dgram_msg (app_session_t * s, struct msghdr *msg)
+{
+  return app_recv_dgram_msg_raw (s->rx_fifo, msg, &s->transport, 1, 0);
+}
+
 always_inline int
 app_recv_stream_raw (svm_fifo_t * f, u8 * buf, u32 len, u8 clear_evt, u8 peek)
 {
